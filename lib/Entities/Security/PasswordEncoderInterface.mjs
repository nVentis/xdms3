import NotImplementedException from "../Exceptions/NotImplementedException.mjs";

class PasswordEncoderInterface {
	/**
	 *
	 * @param {string} raw
	 * @param {string} [salt] - May be auto generated by the hashing function
	 * @returns {Promise<void>}
	 */
	async encodePassword (
		raw,
		salt
	) {
		throw new NotImplementedException("encodePassword");
	}

	/**
	 *
	 * @param {string} encoded
	 * @param {string} raw
	 * @param {string} [salt]
	 * @returns {Promise<void>}
	 */
	async isPasswordValid (
		encoded,
		raw,
		salt
	) {
		throw new NotImplementedException("isPasswordValid");
	}

	/**
	 *
	 * @param {string} encodedString
	 * @returns {boolean}
	 */
	needsRehash (
		encodedString
	) {
		throw new NotImplementedException("needsRehash");
	}

	/**
	 * Time-safe comparison of two hash values
	 * @param {string} hash1
	 * @param {string} hash2
	 * @returns {boolean}
	 */
	hash_equals(hash1, hash2) {
		// Source: https://stackoverflow.com/questions/43234050/testing-equality-of-sha-256-digests-using-bitwise-operators
		let res = 0,
			len = hash1.length;

		for (let i = 0; i < len; ++i)
			res |= hash1.charCodeAt(i) ^ hash2.charCodeAt(i);

		return res === 0;
	}
}

export default PasswordEncoderInterface;